/*
File: lab3p2.c
Created by: Aisha Iftikhar
Creation Date: 9/28/18
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "lab3p2.h"

/*function prototypes*/
void select(void (**fp)(char*, char*), int option, char* string1, char* string2);

/*main*/
int main(int argc, char *argv[]){
	/*declarations*/
	void (*fp[3])(char*, char*) = {concatenate, equal, invert};
	int errorCount = 0;
	
	/*error checking*/
	if(argc != 4 && argc != 3){
		printf("Error 1: Invalid number of arguments following program name.\n");
		errorCount++;
	}
	if(((strcmp(argv[1], "1") == 0) || (strcmp(argv[1], "2") == 0)) && (argc != 4)){
		printf("Error 2: Functions 1 & 2 must have 3 arguments following program name (func_number, string1, string2).\n");
		errorCount++;
	}
	if(strcmp(argv[1], "3") == 0 && argc != 3){
		printf("Error 3: Function 3 must have 2 arguments following program name (func_number, string1).\n");
		errorCount++;
	}
	if(errorCount == 0) {select(fp, atoi(argv[1]), argv[2], argv[3]);}

return(0);

}

/*function definition*/
void select(void (**fp)(char*, char*), int option, char* string1, char* string2){
	if(option == 1 || option == 2 || option == 3){
		fp[option - 1](string1, string2);
	} else {
		printf("Error! Incorrect function type number. Please enter 1, 2, or 3.\n");
	}
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------


/*
File: lab3p2.h
Created by: Aisha Iftikhar
Creation Date: 9/28/18
*/

/*option 1:*/
void concatenate(char *str1, char *str2);
/*option 2:*/
void equal(char *str1, char *str2);
/*option 3:*/
void invert(char*str1, char *str2);


-----------------------------------------------------------------------------------------------------------------------------------------------------------


/*
File: lab3p2f1.c
Created by: Aisha Iftikhar
Creation Date: 9/28/18
*/

#include "lab3p2.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

void concatenate(char *str1, char *str2){
	printf("Output is: %s %s\n", str1, str2);
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------


/*
File: lab3p2f2.c
Created by: Aisha Iftikhar
Creation Date: 9/28/18
*/

#include "lab3p2.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

void equal(char *str1, char *str2){
	if(strcmp(str1, str2)){
		printf("string1 is not the same as string2\n");
	} else {
		printf("string1 is the same as string2\n");
	}
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------


/*
File: lab3p2f3.c
Created by: Aisha Iftikhar
Creation Date: 9/28/18
*/

#include "lab3p2.h"
#include <string.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>

void invert(char *str1, char *str2){
	/*variable declarations*/
	int i = 0;
	int length;
	char *invertString;

	length = (int)strlen(str1) + 1;
	invertString = malloc(length);

	for (i = 0; i < length; i++) {
		/*if lower case, change to upper case*/
		if(islower(str1[i])){
			invertString[i] = toupper(str1[i]);
		/*if upper case, change to lower case*/
		} else if(isupper(str1[i])) {
			invertString[i] = tolower(str1[i]);
		/*if any other type of character (e.g. !, ?, ^, etc.), keep*/
		} else {
			invertString[i] = str1[i];
		}
  	}

	/*null character*/
	invertString[length - 1] = '\0';

	/*output*/
	printf("string1 with inverted case is: %s\n", invertString);

	/*free the array*/
	free(invertString);
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------


all: lab3p2

lab3p2: lab3p2.o lab3p2f1.o lab3p2f2.o lab3p2f3.o
	gcc lab3p2.o lab3p2f1.o lab3p2f2.o lab3p2f3.o -o lab3p2
lab3p2.o: lab3p2.c lab3p2.h
	gcc -ansi -pedantic -c lab3p2.c
lab3p2f1.o: lab3p2f1.c lab3p2.h
	gcc -ansi -pedantic -c lab3p2f1.c
lab3p2f2.o: lab3p2f2.c lab3p2.h
	gcc -ansi -pedantic -c lab3p2f2.c
lab3p2f3.o: lab3p2f3.c lab3p2.h
	gcc -ansi -pedantic -c lab3p2f3.c
clean:
	rm -rf *.o lab3p2


